diff a/Assets/Shader/MS/SonarMonsterShader.shader b/Assets/Shader/MS/SonarMonsterShader.shader	(rejected hunks)
@@ -243,6 +243,135 @@
             }
             ENDHLSL
         }
+
+        // �ƿ� ���� �׸��� �κ�
+        // Pass
+        // {
+        //     Name "OUTLINE"
+        //     Cull Front
+        //     ZWrite ON
+        //     ZTest LEqual
+
+        //     Blend SrcAlpha OneMinusSrcAlpha
+
+        //     HLSLPROGRAM
+        //     #pragma vertex vert
+        //     #pragma fragment frag
+        //     #pragma multi_compile_fog
+
+        //     #include "UnityCG.cginc"
+
+        //     struct appdata
+        //     {
+        //         float4 vertex : POSITION;
+        //         float3 normal : NORMAL;
+        //     };
+
+        //     struct v2f
+        //     {
+        //         UNITY_FOG_COORDS(1)
+        //         float4 vertex : SV_POSITION;
+        //         float3 worldPos : TEXCOORD0; // ���� ��ǥ �߰�
+        //         float3 originalWorldPos : TEXCOORD1; // ���� ��ġ�� ���� ��ǥ �߰�
+        //     };
+
+        //     float _OutlineWidth;
+        //     float4 _OutlineColor;
+        //     float4 _RingColorM; // �� ���� �߰�
+        //     float _OutlineRingSpeed;
+        //     float _OutlineRingWidth;
+        //     float4 _hitPtsM[100];
+        //     float _StartTime;
+        //     float _RingFadeDuration;
+        //     float _OutlineAlpha;
+        //     float _DistanceFactor; // �Ÿ� ��� �����ϸ��� ���� ����
+        //     float _OutlinePower; // Fresnel ȿ���� ���� ����
+
+
+
+        //     v2f vert(appdata v)
+        //     {
+        //         v2f o;
+
+        //         // ���� ��ǥ ���
+        //         o.originalWorldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
+
+        //         // ī�޶� ���� ���
+        //         float3 viewDir = normalize(_WorldSpaceCameraPos - o.originalWorldPos);
+        //         // ���� ����
+        //         float3 normal = normalize(mul((float3x3)unity_ObjectToWorld, v.normal));
+
+        //         // Fresnel ȿ�� ��� (�������� ���)
+        //         float fresnel = 1.0 - saturate(dot(viewDir, normal));
+        //         fresnel = pow(fresnel, _OutlinePower); // ���� ������ ����
+
+        //         // ���� �������� ������ �ƿ���� ũ�⸦ �����ϵ��� ����
+        //         float outlineScale = _OutlineWidth * (1.0 + _DistanceFactor * distance(o.originalWorldPos, _WorldSpaceCameraPos));
+
+        //         // ���� �������� ���� �̵� (�ƿ���� ����)
+        //         v.vertex.xyz += v.normal * outlineScale; // �ƿ���� ũ�⸦ �����ϰ� ����
+
+        //         o.vertex = UnityObjectToClipPos(v.vertex);
+
+        //         // ������ ���� ��ǥ ���
+        //         o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
+
+        //         UNITY_TRANSFER_FOG(o, o.vertex);
+        //         return o;
+        //     }
+
+
+        //     fixed4 frag(v2f i) : SV_Target
+        //     {
+        //         fixed4 col = _OutlineColor;
+        //         col.a = _OutlineAlpha;; // �⺻ ���İ� 1
+
+
+
+        //         float mostRecentTime = -1.0; // ���� �ֱ� �ĵ��� �ð�
+        //         float3 mostRecentPos = float3(0, 0, 0); // ���� �ֱ� �ĵ��� ��ġ
+
+        //         for (int idx = 0; idx < 100; idx++)
+        //         {
+
+
+        //             float3 hitPos = _hitPtsM[idx].xyz;  // �ĵ��� ��ġ
+        //             float hitTime = _hitPtsM[idx].w;   // �ĵ��� ���� �ð�
+
+        //             float dist = distance(hitPos, i.originalWorldPos);  // ���� �ȼ��� �ĵ��� �Ÿ�
+        //             float ringStart = (_Time.y - hitTime) * _OutlineRingSpeed - _OutlineRingWidth;
+        //             float ringEnd = (_Time.y - hitTime) * _OutlineRingSpeed;
+
+        //             // ���� �� �ȼ��� ������ ���
+        //             if ( ringStart -0.01f&&ringEnd > dist && hitTime > mostRecentTime)
+        //             {
+        //                 mostRecentTime = hitTime;   // ���� �ֱ� �ð� ������Ʈ
+        //                 mostRecentPos = hitPos;    // ���� �ֱ� ��ġ ������Ʈ
+        //             }
+        //                             // ���� �ֱٿ� ������ �� �ĵ��� ���� ��� ���̵� ����
+        //         if (mostRecentTime > 0)
+        //         {
+        //             float fadeTime = _RingFadeDuration;
+        //             float fadeProgress = 1 - ((_Time.y - mostRecentTime) / fadeTime);
+        //             fadeProgress = saturate(fadeProgress); // 0~1�� ����
+        //             col.rgb = _RingColorM; // �� ���� ����
+        //             float nonLinearFade = pow(fadeProgress, 0.6);
+        //             col.a = nonLinearFade; // ���İ��� ���̵� ���α׷���
+        //         }
+        //         }
+
+
+
+        //         if (col.a <= 0.0)
+        //         {
+        //             discard; // �ƿ������ �׸��� ����
+        //         }
+
+        //         UNITY_APPLY_FOG(i.fogCoord, col);
+        //         return col;
+        //     }
+        //     ENDHLSL
+        // }
     }
 
     FallBack "Diffuse"
